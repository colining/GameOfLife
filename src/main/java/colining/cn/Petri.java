package colining.cn;import java.util.Set;/** * 翻译：Petri-培养皿 */public class Petri {    public static final int LIVING = 1;    public static final int DEAD = 0;    private int[][] cells;//1：生；0：死    /**     * 创建方形培养皿     *     * @param size 边长     */    public Petri(int size) {        cells = new int[size][size];//Java语言中，数组元素默认初始化为0    }    public Petri(int[][] existing) {        cells = existing;    }    public int getSize() {        return cells.length;    }    public boolean isLiving(int row, int column) {        return cells[row - 1][column - 1] == LIVING;    }    public void setLiving(int row, int column) {        cells[row - 1][column - 1] = LIVING;    }    public void setDead(int row, int column) {        cells[row - 1][column - 1] = DEAD;    }    public boolean shouldLiveNextTurn(int row, int column) {        if (countLivingNeighbours(row, column) >= 3) {            return true;        } else if (countLivingNeighbours(row, column) == 2) {            return isLiving(row, column);        } else {            return false;        }    }    private int countLivingNeighbours(int row, int column) {        int result = 0;        Set<Coordinate> neighbourPositions = new Coordinate(row, column).getSurroundings(getSize());        for (Coordinate neighbour : neighbourPositions) {            if (isLiving(neighbour.row, neighbour.column)) {                result++;            }        }        return result;    }}